// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MatchProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf {

  /// <summary>Holder for reflection information generated from MatchProto.proto</summary>
  public static partial class MatchProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for MatchProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBNYXRjaFByb3RvLnByb3RvEg9Hb29nbGUuUHJvdG9idWYiegoYUEJfTWF0",
            "Y2hUZWFtQWRkX0MyR1MyRk1TEg8KB3BpZGxpc3QYASADKAQSDwoHZ3VhbnFp",
            "YRgCIAEoDRI8CgtwbGF5ZXJzaW5mbxgDIAMoCzInLkdvb2dsZS5Qcm90b2J1",
            "Zi5QQl9NYXRjaFRlYW1NZW1iZXJJbmZvImYKFlBCX01hdGNoVGVhbU1lbWJl",
            "ckluZm8SCwoDcGlkGAEgASgEEhQKDGZyb21zZXJ2ZXJpZBgCIAEoDRIMCgRp",
            "Y29uGAMgASgNEgwKBG5hbWUYBCABKAkSDQoFcmVhZHkYBSABKAgiagoYUEJf",
            "TWF0Y2hUZWFtQWRkX0ZNUzJHUzJDEg8KB3BpZGxpc3QYASADKAQSDwoHZ3Vh",
            "bnFpYRgCIAEoDRILCgNyZXQYAyABKAgSEAoIbGFzdHRpbWUYBCABKA0SDQoF",
            "ZXJyb3IYBSABKAkiKwoYUEJfTWF0Y2hUZWFtRGVsX0MyR1MyRk1TEg8KB2d1",
            "YW5xaWEYASABKA0iWAoYUEJfTWF0Y2hUZWFtRGVsX0ZNUzJHUzJDEg8KB3Bp",
            "ZGxpc3QYASADKAQSDwoHZ3VhbnFpYRgCIAEoDRILCgNyZXQYAyABKAgSDQoF",
            "ZXJyb3IYBCABKAkiLQoaUEJfTWF0Y2hUZWFtUmVhZHlfQzJHUzJGTVMSDwoH",
            "Z3VhbnFpYRgBIAEoDSKvAQoaUEJfTWF0Y2hUZWFtUmVhZHlfRk1TMkdTMkMS",
            "DwoHcGlkbGlzdBgBIAMoBBIPCgdndWFucWlhGAIgASgNEg4KBnRlYW1pZBgD",
            "IAEoDRIQCghsYXN0dGltZRgEIAEoDRI8CgtwbGF5ZXJzaW5mbxgFIAMoCzIn",
            "Lkdvb2dsZS5Qcm90b2J1Zi5QQl9NYXRjaFRlYW1NZW1iZXJJbmZvEg8KB3Jl",
            "ZnJlc2gYBiABKAgiZgoZUEJfTWF0Y2hUZWFtRmFpbF9GTVMyR1MyQxIPCgdw",
            "aWRsaXN0GAEgAygEEg8KB2d1YW5xaWEYAiABKA0SDgoGdGVhbWlkGAMgASgN",
            "EhcKD25vdG1hdGNocGlkbGlzdBgEIAMoBCLeAQoaUEJfTWF0Y2hUZWFtRmln",
            "aHRfRk1TMkdTMkMSDwoHcGlkbGlzdBgBIAMoBBIPCgdndWFucWlhGAIgASgN",
            "Eg4KBnRlYW1pZBgDIAEoDRITCgtmaWdodHJvb21pZBgEIAEoDRIRCglmcnMy",
            "Y3BvcnQYBSABKA0SEQoJZnJzMmNob3N0GAYgASgJEjgKC3BsYXllcnNkYXRh",
            "GAcgAygLMiMuR29vZ2xlLlByb3RvYnVmLlBCX0ZpZ2h0UGxheWVySW5mbxIM",
            "CgRzZWVkGAggASgFEgsKA2ZwcxgJIAEoBSJoChJQQl9GaWdodFBsYXllcklu",
            "Zm8SCwoDcGlkGAEgASgEEhEKCXBsYXllcmlkeBgCIAEoDRIQCghoZWxsb2tl",
            "eRgDIAEoCRIMCgRuYW1lGAQgASgJEhIKCkNob29zZUhlcm8YBSABKAUq0wEK",
            "Ck1hdGNoTXNnSUQSFgoSQzJHUzJGTVNfTUFUQ0hfQUREEAASFgoSRk1TMkdT",
            "MkNfTUFUQ0hfQUREEAESFgoSQzJHUzJGTVNfTUFUQ0hfREVMEAISFgoSRk1T",
            "MkdTMkNfTUFUQ0hfREVMEAMSGAoURk1TMkdTMkNfTUFUQ0hfU1RBUlQQBBIY",
            "ChRDMkdTMkZNU19NQVRDSF9SRUFEWRAFEhcKE0ZNUzJHUzJDX01BVENIX0ZB",
            "SUwQBhIYChRGTVMyR1MyQ19NQVRDSF9GSUdIVBAHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Protobuf.MatchMsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamAdd_C2GS2FMS), global::Google.Protobuf.PB_MatchTeamAdd_C2GS2FMS.Parser, new[]{ "Pidlist", "Guanqia", "Playersinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamMemberInfo), global::Google.Protobuf.PB_MatchTeamMemberInfo.Parser, new[]{ "Pid", "Fromserverid", "Icon", "Name", "Ready" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamAdd_FMS2GS2C), global::Google.Protobuf.PB_MatchTeamAdd_FMS2GS2C.Parser, new[]{ "Pidlist", "Guanqia", "Ret", "Lasttime", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamDel_C2GS2FMS), global::Google.Protobuf.PB_MatchTeamDel_C2GS2FMS.Parser, new[]{ "Guanqia" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamDel_FMS2GS2C), global::Google.Protobuf.PB_MatchTeamDel_FMS2GS2C.Parser, new[]{ "Pidlist", "Guanqia", "Ret", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamReady_C2GS2FMS), global::Google.Protobuf.PB_MatchTeamReady_C2GS2FMS.Parser, new[]{ "Guanqia" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamReady_FMS2GS2C), global::Google.Protobuf.PB_MatchTeamReady_FMS2GS2C.Parser, new[]{ "Pidlist", "Guanqia", "Teamid", "Lasttime", "Playersinfo", "Refresh" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamFail_FMS2GS2C), global::Google.Protobuf.PB_MatchTeamFail_FMS2GS2C.Parser, new[]{ "Pidlist", "Guanqia", "Teamid", "Notmatchpidlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_MatchTeamFight_FMS2GS2C), global::Google.Protobuf.PB_MatchTeamFight_FMS2GS2C.Parser, new[]{ "Pidlist", "Guanqia", "Teamid", "Fightroomid", "Frs2Cport", "Frs2Chost", "Playersdata", "Seed", "Fps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_FightPlayerInfo), global::Google.Protobuf.PB_FightPlayerInfo.Parser, new[]{ "Pid", "Playeridx", "Hellokey", "Name", "ChooseHero" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///==================新匹配系统消息协议=========================
  /// </summary>
  public enum MatchMsgID {
    /// <summary>
    ///匹配系统消息协议
    /// </summary>
    [pbr::OriginalName("C2GS2FMS_MATCH_ADD")] C2Gs2FmsMatchAdd = 0,
    /// <summary>
    ///请求加入匹配队列结果
    /// </summary>
    [pbr::OriginalName("FMS2GS2C_MATCH_ADD")] Fms2Gs2CMatchAdd = 1,
    /// <summary>
    ///请求取消匹配队列
    /// </summary>
    [pbr::OriginalName("C2GS2FMS_MATCH_DEL")] C2Gs2FmsMatchDel = 2,
    /// <summary>
    ///请求取消匹配队列结果
    /// </summary>
    [pbr::OriginalName("FMS2GS2C_MATCH_DEL")] Fms2Gs2CMatchDel = 3,
    /// <summary>
    ///推送匹配成功,及相关信息(多次推送当作刷新信息)
    /// </summary>
    [pbr::OriginalName("FMS2GS2C_MATCH_START")] Fms2Gs2CMatchStart = 4,
    /// <summary>
    ///玩家点击开始战斗准备 c-g
    /// </summary>
    [pbr::OriginalName("C2GS2FMS_MATCH_READY")] C2Gs2FmsMatchReady = 5,
    /// <summary>
    ///推送战斗准备失败(重新进入匹配队列)
    /// </summary>
    [pbr::OriginalName("FMS2GS2C_MATCH_FAIL")] Fms2Gs2CMatchFail = 6,
    /// <summary>
    ///推送战斗准备成功,开始战斗,及相关信息   g-c
    /// </summary>
    [pbr::OriginalName("FMS2GS2C_MATCH_FIGHT")] Fms2Gs2CMatchFight = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求加入匹配队列
  /// </summary>
  public sealed partial class PB_MatchTeamAdd_C2GS2FMS : pb::IMessage<PB_MatchTeamAdd_C2GS2FMS> {
    private static readonly pb::MessageParser<PB_MatchTeamAdd_C2GS2FMS> _parser = new pb::MessageParser<PB_MatchTeamAdd_C2GS2FMS>(() => new PB_MatchTeamAdd_C2GS2FMS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamAdd_C2GS2FMS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamAdd_C2GS2FMS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamAdd_C2GS2FMS(PB_MatchTeamAdd_C2GS2FMS other) : this() {
      pidlist_ = other.pidlist_.Clone();
      guanqia_ = other.guanqia_;
      playersinfo_ = other.playersinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamAdd_C2GS2FMS Clone() {
      return new PB_MatchTeamAdd_C2GS2FMS(this);
    }

    /// <summary>Field number for the "pidlist" field.</summary>
    public const int PidlistFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_pidlist_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> pidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///自己的ID+队友的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pidlist {
      get { return pidlist_; }
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 2;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    /// <summary>Field number for the "playersinfo" field.</summary>
    public const int PlayersinfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Protobuf.PB_MatchTeamMemberInfo> _repeated_playersinfo_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.PB_MatchTeamMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.PB_MatchTeamMemberInfo> playersinfo_ = new pbc::RepeatedField<global::Google.Protobuf.PB_MatchTeamMemberInfo>();
    /// <summary>
    ///自己+队友的详细信息(GS2FMS时使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.PB_MatchTeamMemberInfo> Playersinfo {
      get { return playersinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamAdd_C2GS2FMS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamAdd_C2GS2FMS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pidlist_.Equals(other.pidlist_)) return false;
      if (Guanqia != other.Guanqia) return false;
      if(!playersinfo_.Equals(other.playersinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pidlist_.GetHashCode();
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      hash ^= playersinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pidlist_.WriteTo(output, _repeated_pidlist_codec);
      if (Guanqia != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guanqia);
      }
      playersinfo_.WriteTo(output, _repeated_playersinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pidlist_.CalculateSize(_repeated_pidlist_codec);
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      size += playersinfo_.CalculateSize(_repeated_playersinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamAdd_C2GS2FMS other) {
      if (other == null) {
        return;
      }
      pidlist_.Add(other.pidlist_);
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      playersinfo_.Add(other.playersinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pidlist_.AddEntriesFrom(input, _repeated_pidlist_codec);
            break;
          }
          case 16: {
            Guanqia = input.ReadUInt32();
            break;
          }
          case 26: {
            playersinfo_.AddEntriesFrom(input, _repeated_playersinfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个匹配玩家信息
  /// </summary>
  public sealed partial class PB_MatchTeamMemberInfo : pb::IMessage<PB_MatchTeamMemberInfo> {
    private static readonly pb::MessageParser<PB_MatchTeamMemberInfo> _parser = new pb::MessageParser<PB_MatchTeamMemberInfo>(() => new PB_MatchTeamMemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamMemberInfo(PB_MatchTeamMemberInfo other) : this() {
      pid_ = other.pid_;
      fromserverid_ = other.fromserverid_;
      icon_ = other.icon_;
      name_ = other.name_;
      ready_ = other.ready_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamMemberInfo Clone() {
      return new PB_MatchTeamMemberInfo(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private ulong pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "fromserverid" field.</summary>
    public const int FromserveridFieldNumber = 2;
    private uint fromserverid_;
    /// <summary>
    ///来自的服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromserverid {
      get { return fromserverid_; }
      set {
        fromserverid_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private uint icon_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 5;
    private bool ready_;
    /// <summary>
    ///战斗准备时候使用的数据:是否准备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Fromserverid != other.Fromserverid) return false;
      if (Icon != other.Icon) return false;
      if (Name != other.Name) return false;
      if (Ready != other.Ready) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0UL) hash ^= Pid.GetHashCode();
      if (Fromserverid != 0) hash ^= Fromserverid.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Pid);
      }
      if (Fromserverid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Fromserverid);
      }
      if (Icon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Icon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Ready != false) {
        output.WriteRawTag(40);
        output.WriteBool(Ready);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Pid);
      }
      if (Fromserverid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromserverid);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamMemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0UL) {
        Pid = other.Pid;
      }
      if (other.Fromserverid != 0) {
        Fromserverid = other.Fromserverid;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadUInt64();
            break;
          }
          case 16: {
            Fromserverid = input.ReadUInt32();
            break;
          }
          case 24: {
            Icon = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求加入匹配队列结果
  /// </summary>
  public sealed partial class PB_MatchTeamAdd_FMS2GS2C : pb::IMessage<PB_MatchTeamAdd_FMS2GS2C> {
    private static readonly pb::MessageParser<PB_MatchTeamAdd_FMS2GS2C> _parser = new pb::MessageParser<PB_MatchTeamAdd_FMS2GS2C>(() => new PB_MatchTeamAdd_FMS2GS2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamAdd_FMS2GS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamAdd_FMS2GS2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamAdd_FMS2GS2C(PB_MatchTeamAdd_FMS2GS2C other) : this() {
      pidlist_ = other.pidlist_.Clone();
      guanqia_ = other.guanqia_;
      ret_ = other.ret_;
      lasttime_ = other.lasttime_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamAdd_FMS2GS2C Clone() {
      return new PB_MatchTeamAdd_FMS2GS2C(this);
    }

    /// <summary>Field number for the "pidlist" field.</summary>
    public const int PidlistFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_pidlist_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> pidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///自己的ID+队友的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pidlist {
      get { return pidlist_; }
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 2;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 3;
    private bool ret_;
    /// <summary>
    ///是否加入匹配成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 4;
    private uint lasttime_;
    /// <summary>
    ///加入匹配成功后预计匹配成功时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 5;
    private string error_ = "";
    /// <summary>
    ///加入匹配失败的原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamAdd_FMS2GS2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamAdd_FMS2GS2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pidlist_.Equals(other.pidlist_)) return false;
      if (Guanqia != other.Guanqia) return false;
      if (Ret != other.Ret) return false;
      if (Lasttime != other.Lasttime) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pidlist_.GetHashCode();
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (Ret != false) hash ^= Ret.GetHashCode();
      if (Lasttime != 0) hash ^= Lasttime.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pidlist_.WriteTo(output, _repeated_pidlist_codec);
      if (Guanqia != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guanqia);
      }
      if (Ret != false) {
        output.WriteRawTag(24);
        output.WriteBool(Ret);
      }
      if (Lasttime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lasttime);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pidlist_.CalculateSize(_repeated_pidlist_codec);
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (Ret != false) {
        size += 1 + 1;
      }
      if (Lasttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lasttime);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamAdd_FMS2GS2C other) {
      if (other == null) {
        return;
      }
      pidlist_.Add(other.pidlist_);
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      if (other.Ret != false) {
        Ret = other.Ret;
      }
      if (other.Lasttime != 0) {
        Lasttime = other.Lasttime;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pidlist_.AddEntriesFrom(input, _repeated_pidlist_codec);
            break;
          }
          case 16: {
            Guanqia = input.ReadUInt32();
            break;
          }
          case 24: {
            Ret = input.ReadBool();
            break;
          }
          case 32: {
            Lasttime = input.ReadUInt32();
            break;
          }
          case 42: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求取消匹配队列
  /// </summary>
  public sealed partial class PB_MatchTeamDel_C2GS2FMS : pb::IMessage<PB_MatchTeamDel_C2GS2FMS> {
    private static readonly pb::MessageParser<PB_MatchTeamDel_C2GS2FMS> _parser = new pb::MessageParser<PB_MatchTeamDel_C2GS2FMS>(() => new PB_MatchTeamDel_C2GS2FMS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamDel_C2GS2FMS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamDel_C2GS2FMS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamDel_C2GS2FMS(PB_MatchTeamDel_C2GS2FMS other) : this() {
      guanqia_ = other.guanqia_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamDel_C2GS2FMS Clone() {
      return new PB_MatchTeamDel_C2GS2FMS(this);
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 1;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamDel_C2GS2FMS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamDel_C2GS2FMS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guanqia != other.Guanqia) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guanqia != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guanqia);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamDel_C2GS2FMS other) {
      if (other == null) {
        return;
      }
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Guanqia = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求取消匹配队列结果
  /// </summary>
  public sealed partial class PB_MatchTeamDel_FMS2GS2C : pb::IMessage<PB_MatchTeamDel_FMS2GS2C> {
    private static readonly pb::MessageParser<PB_MatchTeamDel_FMS2GS2C> _parser = new pb::MessageParser<PB_MatchTeamDel_FMS2GS2C>(() => new PB_MatchTeamDel_FMS2GS2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamDel_FMS2GS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamDel_FMS2GS2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamDel_FMS2GS2C(PB_MatchTeamDel_FMS2GS2C other) : this() {
      pidlist_ = other.pidlist_.Clone();
      guanqia_ = other.guanqia_;
      ret_ = other.ret_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamDel_FMS2GS2C Clone() {
      return new PB_MatchTeamDel_FMS2GS2C(this);
    }

    /// <summary>Field number for the "pidlist" field.</summary>
    public const int PidlistFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_pidlist_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> pidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///自己的ID+队友的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pidlist {
      get { return pidlist_; }
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 2;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 3;
    private bool ret_;
    /// <summary>
    ///是否取消匹配队列成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private string error_ = "";
    /// <summary>
    ///取消匹配队列失败的原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamDel_FMS2GS2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamDel_FMS2GS2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pidlist_.Equals(other.pidlist_)) return false;
      if (Guanqia != other.Guanqia) return false;
      if (Ret != other.Ret) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pidlist_.GetHashCode();
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (Ret != false) hash ^= Ret.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pidlist_.WriteTo(output, _repeated_pidlist_codec);
      if (Guanqia != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guanqia);
      }
      if (Ret != false) {
        output.WriteRawTag(24);
        output.WriteBool(Ret);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pidlist_.CalculateSize(_repeated_pidlist_codec);
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (Ret != false) {
        size += 1 + 1;
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamDel_FMS2GS2C other) {
      if (other == null) {
        return;
      }
      pidlist_.Add(other.pidlist_);
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      if (other.Ret != false) {
        Ret = other.Ret;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pidlist_.AddEntriesFrom(input, _repeated_pidlist_codec);
            break;
          }
          case 16: {
            Guanqia = input.ReadUInt32();
            break;
          }
          case 24: {
            Ret = input.ReadBool();
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家点击开始战斗准备
  /// </summary>
  public sealed partial class PB_MatchTeamReady_C2GS2FMS : pb::IMessage<PB_MatchTeamReady_C2GS2FMS> {
    private static readonly pb::MessageParser<PB_MatchTeamReady_C2GS2FMS> _parser = new pb::MessageParser<PB_MatchTeamReady_C2GS2FMS>(() => new PB_MatchTeamReady_C2GS2FMS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamReady_C2GS2FMS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamReady_C2GS2FMS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamReady_C2GS2FMS(PB_MatchTeamReady_C2GS2FMS other) : this() {
      guanqia_ = other.guanqia_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamReady_C2GS2FMS Clone() {
      return new PB_MatchTeamReady_C2GS2FMS(this);
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 1;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamReady_C2GS2FMS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamReady_C2GS2FMS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guanqia != other.Guanqia) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guanqia != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guanqia);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamReady_C2GS2FMS other) {
      if (other == null) {
        return;
      }
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Guanqia = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送匹配成功,及相关信息(多次推送当作刷新信息)
  /// </summary>
  public sealed partial class PB_MatchTeamReady_FMS2GS2C : pb::IMessage<PB_MatchTeamReady_FMS2GS2C> {
    private static readonly pb::MessageParser<PB_MatchTeamReady_FMS2GS2C> _parser = new pb::MessageParser<PB_MatchTeamReady_FMS2GS2C>(() => new PB_MatchTeamReady_FMS2GS2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamReady_FMS2GS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamReady_FMS2GS2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamReady_FMS2GS2C(PB_MatchTeamReady_FMS2GS2C other) : this() {
      pidlist_ = other.pidlist_.Clone();
      guanqia_ = other.guanqia_;
      teamid_ = other.teamid_;
      lasttime_ = other.lasttime_;
      playersinfo_ = other.playersinfo_.Clone();
      refresh_ = other.refresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamReady_FMS2GS2C Clone() {
      return new PB_MatchTeamReady_FMS2GS2C(this);
    }

    /// <summary>Field number for the "pidlist" field.</summary>
    public const int PidlistFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_pidlist_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> pidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///所有人的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pidlist {
      get { return pidlist_; }
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 2;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 3;
    private uint teamid_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 4;
    private uint lasttime_;
    /// <summary>
    ///匹配成功后准备剩余倒计时时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "playersinfo" field.</summary>
    public const int PlayersinfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Protobuf.PB_MatchTeamMemberInfo> _repeated_playersinfo_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.PB_MatchTeamMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.PB_MatchTeamMemberInfo> playersinfo_ = new pbc::RepeatedField<global::Google.Protobuf.PB_MatchTeamMemberInfo>();
    /// <summary>
    ///自己+队友的详细信息(GS2FMS时使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.PB_MatchTeamMemberInfo> Playersinfo {
      get { return playersinfo_; }
    }

    /// <summary>Field number for the "refresh" field.</summary>
    public const int RefreshFieldNumber = 6;
    private bool refresh_;
    /// <summary>
    ///是否是刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Refresh {
      get { return refresh_; }
      set {
        refresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamReady_FMS2GS2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamReady_FMS2GS2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pidlist_.Equals(other.pidlist_)) return false;
      if (Guanqia != other.Guanqia) return false;
      if (Teamid != other.Teamid) return false;
      if (Lasttime != other.Lasttime) return false;
      if(!playersinfo_.Equals(other.playersinfo_)) return false;
      if (Refresh != other.Refresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pidlist_.GetHashCode();
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      if (Lasttime != 0) hash ^= Lasttime.GetHashCode();
      hash ^= playersinfo_.GetHashCode();
      if (Refresh != false) hash ^= Refresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pidlist_.WriteTo(output, _repeated_pidlist_codec);
      if (Guanqia != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guanqia);
      }
      if (Teamid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Teamid);
      }
      if (Lasttime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lasttime);
      }
      playersinfo_.WriteTo(output, _repeated_playersinfo_codec);
      if (Refresh != false) {
        output.WriteRawTag(48);
        output.WriteBool(Refresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pidlist_.CalculateSize(_repeated_pidlist_codec);
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
      }
      if (Lasttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lasttime);
      }
      size += playersinfo_.CalculateSize(_repeated_playersinfo_codec);
      if (Refresh != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamReady_FMS2GS2C other) {
      if (other == null) {
        return;
      }
      pidlist_.Add(other.pidlist_);
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      if (other.Lasttime != 0) {
        Lasttime = other.Lasttime;
      }
      playersinfo_.Add(other.playersinfo_);
      if (other.Refresh != false) {
        Refresh = other.Refresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pidlist_.AddEntriesFrom(input, _repeated_pidlist_codec);
            break;
          }
          case 16: {
            Guanqia = input.ReadUInt32();
            break;
          }
          case 24: {
            Teamid = input.ReadUInt32();
            break;
          }
          case 32: {
            Lasttime = input.ReadUInt32();
            break;
          }
          case 42: {
            playersinfo_.AddEntriesFrom(input, _repeated_playersinfo_codec);
            break;
          }
          case 48: {
            Refresh = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送战斗准备失败(重新进入匹配队列)
  /// </summary>
  public sealed partial class PB_MatchTeamFail_FMS2GS2C : pb::IMessage<PB_MatchTeamFail_FMS2GS2C> {
    private static readonly pb::MessageParser<PB_MatchTeamFail_FMS2GS2C> _parser = new pb::MessageParser<PB_MatchTeamFail_FMS2GS2C>(() => new PB_MatchTeamFail_FMS2GS2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamFail_FMS2GS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamFail_FMS2GS2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamFail_FMS2GS2C(PB_MatchTeamFail_FMS2GS2C other) : this() {
      pidlist_ = other.pidlist_.Clone();
      guanqia_ = other.guanqia_;
      teamid_ = other.teamid_;
      notmatchpidlist_ = other.notmatchpidlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamFail_FMS2GS2C Clone() {
      return new PB_MatchTeamFail_FMS2GS2C(this);
    }

    /// <summary>Field number for the "pidlist" field.</summary>
    public const int PidlistFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_pidlist_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> pidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///所有人的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pidlist {
      get { return pidlist_; }
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 2;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 3;
    private uint teamid_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "notmatchpidlist" field.</summary>
    public const int NotmatchpidlistFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_notmatchpidlist_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> notmatchpidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///所有不会再次进入匹配队列的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Notmatchpidlist {
      get { return notmatchpidlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamFail_FMS2GS2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamFail_FMS2GS2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pidlist_.Equals(other.pidlist_)) return false;
      if (Guanqia != other.Guanqia) return false;
      if (Teamid != other.Teamid) return false;
      if(!notmatchpidlist_.Equals(other.notmatchpidlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pidlist_.GetHashCode();
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      hash ^= notmatchpidlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pidlist_.WriteTo(output, _repeated_pidlist_codec);
      if (Guanqia != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guanqia);
      }
      if (Teamid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Teamid);
      }
      notmatchpidlist_.WriteTo(output, _repeated_notmatchpidlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pidlist_.CalculateSize(_repeated_pidlist_codec);
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
      }
      size += notmatchpidlist_.CalculateSize(_repeated_notmatchpidlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamFail_FMS2GS2C other) {
      if (other == null) {
        return;
      }
      pidlist_.Add(other.pidlist_);
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      notmatchpidlist_.Add(other.notmatchpidlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pidlist_.AddEntriesFrom(input, _repeated_pidlist_codec);
            break;
          }
          case 16: {
            Guanqia = input.ReadUInt32();
            break;
          }
          case 24: {
            Teamid = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            notmatchpidlist_.AddEntriesFrom(input, _repeated_notmatchpidlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推送战斗准备成功,开始战斗,及相关信息
  /// </summary>
  public sealed partial class PB_MatchTeamFight_FMS2GS2C : pb::IMessage<PB_MatchTeamFight_FMS2GS2C> {
    private static readonly pb::MessageParser<PB_MatchTeamFight_FMS2GS2C> _parser = new pb::MessageParser<PB_MatchTeamFight_FMS2GS2C>(() => new PB_MatchTeamFight_FMS2GS2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_MatchTeamFight_FMS2GS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamFight_FMS2GS2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamFight_FMS2GS2C(PB_MatchTeamFight_FMS2GS2C other) : this() {
      pidlist_ = other.pidlist_.Clone();
      guanqia_ = other.guanqia_;
      teamid_ = other.teamid_;
      fightroomid_ = other.fightroomid_;
      frs2Cport_ = other.frs2Cport_;
      frs2Chost_ = other.frs2Chost_;
      playersdata_ = other.playersdata_.Clone();
      seed_ = other.seed_;
      fps_ = other.fps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_MatchTeamFight_FMS2GS2C Clone() {
      return new PB_MatchTeamFight_FMS2GS2C(this);
    }

    /// <summary>Field number for the "pidlist" field.</summary>
    public const int PidlistFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_pidlist_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> pidlist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///所有人的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pidlist {
      get { return pidlist_; }
    }

    /// <summary>Field number for the "guanqia" field.</summary>
    public const int GuanqiaFieldNumber = 2;
    private uint guanqia_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guanqia {
      get { return guanqia_; }
      set {
        guanqia_ = value;
      }
    }

    /// <summary>Field number for the "teamid" field.</summary>
    public const int TeamidFieldNumber = 3;
    private uint teamid_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "fightroomid" field.</summary>
    public const int FightroomidFieldNumber = 4;
    private uint fightroomid_;
    /// <summary>
    ///战斗房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fightroomid {
      get { return fightroomid_; }
      set {
        fightroomid_ = value;
      }
    }

    /// <summary>Field number for the "frs2cport" field.</summary>
    public const int Frs2CportFieldNumber = 5;
    private uint frs2Cport_;
    /// <summary>
    ///战斗房间post
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frs2Cport {
      get { return frs2Cport_; }
      set {
        frs2Cport_ = value;
      }
    }

    /// <summary>Field number for the "frs2chost" field.</summary>
    public const int Frs2ChostFieldNumber = 6;
    private string frs2Chost_ = "";
    /// <summary>
    ///战斗房间host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Frs2Chost {
      get { return frs2Chost_; }
      set {
        frs2Chost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playersdata" field.</summary>
    public const int PlayersdataFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Protobuf.PB_FightPlayerInfo> _repeated_playersdata_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Protobuf.PB_FightPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.PB_FightPlayerInfo> playersdata_ = new pbc::RepeatedField<global::Google.Protobuf.PB_FightPlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.PB_FightPlayerInfo> Playersdata {
      get { return playersdata_; }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 8;
    private int seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 9;
    private int fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_MatchTeamFight_FMS2GS2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_MatchTeamFight_FMS2GS2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pidlist_.Equals(other.pidlist_)) return false;
      if (Guanqia != other.Guanqia) return false;
      if (Teamid != other.Teamid) return false;
      if (Fightroomid != other.Fightroomid) return false;
      if (Frs2Cport != other.Frs2Cport) return false;
      if (Frs2Chost != other.Frs2Chost) return false;
      if(!playersdata_.Equals(other.playersdata_)) return false;
      if (Seed != other.Seed) return false;
      if (Fps != other.Fps) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pidlist_.GetHashCode();
      if (Guanqia != 0) hash ^= Guanqia.GetHashCode();
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      if (Fightroomid != 0) hash ^= Fightroomid.GetHashCode();
      if (Frs2Cport != 0) hash ^= Frs2Cport.GetHashCode();
      if (Frs2Chost.Length != 0) hash ^= Frs2Chost.GetHashCode();
      hash ^= playersdata_.GetHashCode();
      if (Seed != 0) hash ^= Seed.GetHashCode();
      if (Fps != 0) hash ^= Fps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pidlist_.WriteTo(output, _repeated_pidlist_codec);
      if (Guanqia != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guanqia);
      }
      if (Teamid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Teamid);
      }
      if (Fightroomid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Fightroomid);
      }
      if (Frs2Cport != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Frs2Cport);
      }
      if (Frs2Chost.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Frs2Chost);
      }
      playersdata_.WriteTo(output, _repeated_playersdata_codec);
      if (Seed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Seed);
      }
      if (Fps != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Fps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pidlist_.CalculateSize(_repeated_pidlist_codec);
      if (Guanqia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guanqia);
      }
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teamid);
      }
      if (Fightroomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fightroomid);
      }
      if (Frs2Cport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frs2Cport);
      }
      if (Frs2Chost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Frs2Chost);
      }
      size += playersdata_.CalculateSize(_repeated_playersdata_codec);
      if (Seed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
      }
      if (Fps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_MatchTeamFight_FMS2GS2C other) {
      if (other == null) {
        return;
      }
      pidlist_.Add(other.pidlist_);
      if (other.Guanqia != 0) {
        Guanqia = other.Guanqia;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      if (other.Fightroomid != 0) {
        Fightroomid = other.Fightroomid;
      }
      if (other.Frs2Cport != 0) {
        Frs2Cport = other.Frs2Cport;
      }
      if (other.Frs2Chost.Length != 0) {
        Frs2Chost = other.Frs2Chost;
      }
      playersdata_.Add(other.playersdata_);
      if (other.Seed != 0) {
        Seed = other.Seed;
      }
      if (other.Fps != 0) {
        Fps = other.Fps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pidlist_.AddEntriesFrom(input, _repeated_pidlist_codec);
            break;
          }
          case 16: {
            Guanqia = input.ReadUInt32();
            break;
          }
          case 24: {
            Teamid = input.ReadUInt32();
            break;
          }
          case 32: {
            Fightroomid = input.ReadUInt32();
            break;
          }
          case 40: {
            Frs2Cport = input.ReadUInt32();
            break;
          }
          case 50: {
            Frs2Chost = input.ReadString();
            break;
          }
          case 58: {
            playersdata_.AddEntriesFrom(input, _repeated_playersdata_codec);
            break;
          }
          case 64: {
            Seed = input.ReadInt32();
            break;
          }
          case 72: {
            Fps = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个战斗玩家信息
  /// </summary>
  public sealed partial class PB_FightPlayerInfo : pb::IMessage<PB_FightPlayerInfo> {
    private static readonly pb::MessageParser<PB_FightPlayerInfo> _parser = new pb::MessageParser<PB_FightPlayerInfo>(() => new PB_FightPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_FightPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MatchProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_FightPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_FightPlayerInfo(PB_FightPlayerInfo other) : this() {
      pid_ = other.pid_;
      playeridx_ = other.playeridx_;
      hellokey_ = other.hellokey_;
      name_ = other.name_;
      chooseHero_ = other.chooseHero_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_FightPlayerInfo Clone() {
      return new PB_FightPlayerInfo(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private ulong pid_;
    /// <summary>
    ///游戏服ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "playeridx" field.</summary>
    public const int PlayeridxFieldNumber = 2;
    private uint playeridx_;
    /// <summary>
    ///战斗房间服临时分配ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Playeridx {
      get { return playeridx_; }
      set {
        playeridx_ = value;
      }
    }

    /// <summary>Field number for the "hellokey" field.</summary>
    public const int HellokeyFieldNumber = 3;
    private string hellokey_ = "";
    /// <summary>
    ///认证合法性的密钥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hellokey {
      get { return hellokey_; }
      set {
        hellokey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChooseHero" field.</summary>
    public const int ChooseHeroFieldNumber = 5;
    private int chooseHero_;
    /// <summary>
    ///本局选择的英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChooseHero {
      get { return chooseHero_; }
      set {
        chooseHero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_FightPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_FightPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Playeridx != other.Playeridx) return false;
      if (Hellokey != other.Hellokey) return false;
      if (Name != other.Name) return false;
      if (ChooseHero != other.ChooseHero) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0UL) hash ^= Pid.GetHashCode();
      if (Playeridx != 0) hash ^= Playeridx.GetHashCode();
      if (Hellokey.Length != 0) hash ^= Hellokey.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ChooseHero != 0) hash ^= ChooseHero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Pid);
      }
      if (Playeridx != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Playeridx);
      }
      if (Hellokey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Hellokey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (ChooseHero != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChooseHero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Pid);
      }
      if (Playeridx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Playeridx);
      }
      if (Hellokey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hellokey);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ChooseHero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChooseHero);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_FightPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0UL) {
        Pid = other.Pid;
      }
      if (other.Playeridx != 0) {
        Playeridx = other.Playeridx;
      }
      if (other.Hellokey.Length != 0) {
        Hellokey = other.Hellokey;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ChooseHero != 0) {
        ChooseHero = other.ChooseHero;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadUInt64();
            break;
          }
          case 16: {
            Playeridx = input.ReadUInt32();
            break;
          }
          case 26: {
            Hellokey = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            ChooseHero = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
