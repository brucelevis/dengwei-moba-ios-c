// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Login.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf {

  /// <summary>Holder for reflection information generated from Login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMb2dpbi5wcm90bxIPR29vZ2xlLlByb3RvYnVmIpoBChFQQl9DMlNQbGF5",
            "ZXJMb2dpbhITCgtBY2Nlc3NUb2tlbhgCIAEoCRIQCghQbGF0Zm9ybRgDIAEo",
            "CRIKCgJPUxgEIAEoCRIQCghHYW1lTmFtZRgFIAEoCRIOCgZTeXNWZXIYBiAB",
            "KAkSEwoLRGV2aWNlTW9kZWwYByABKAkSDgoGTWVtb3J5GAggASgJEgsKA01B",
            "QxgJIAEoCSIiChFQQl9TMkNQbGF5ZXJMb2dpbhINCgVMb2dpbhgBIAEoCCIt",
            "ChlQQl9TMkNQbGF5ZXJRdWlja0xvZ2luS2V5EhAKCFF1aWNrS2V5GAEgASgE",
            "IjYKFlBCX0MyU1BsYXllclF1aWNrTG9naW4SCgoCSUQYASABKAQSEAoIUXVp",
            "Y2tLZXkYAiABKAQiNgoWUEJfUzJDUGxheWVyUXVpY2tMb2dpbhILCgNTdWMY",
            "ASABKAgSDwoHRXJyQ29kZRgCIAEoBSJcChJQQl9DMlNQbGF5ZXJDcmVhdGUS",
            "DAoETmFtZRgBIAEoCRILCgNTZXgYAiABKA0SDgoGTmF0aW9uGAMgASgNEg0K",
            "BVNoYXBlGAQgASgNEgwKBEljb24YBSABKA0iPAoSUEJfUzJDUGxheWVyQ3Jl",
            "YXRlEhEKCWhhc3BsYXllchgBIAEoDRITCgtBY2Nlc3NUb2tlbhgCIAEoCSIv",
            "CgtQQl9OZXRFcnJvchIPCgdlcnJDb2RlGAEgASgNEg8KB2VyclRleHQYAiAB",
            "KAkiMQoTUEJfUzJDUGxheWVyVXBHcmFkZRINCgVncmFkZRgBIAEoDRILCgNl",
            "eHAYAiABKAQiqQUKEFBCX1MyQ1BsYXllckluZm8SCgoCSUQYASABKAQSDAoE",
            "TmFtZRgCIAEoCRIRCglIZXJvU3VtSUQYAyABKA0SCwoDU2V4GAQgASgNEg0K",
            "BUdyYWRlGAUgASgNEgwKBEljb24YBiABKA0SEQoJVGl0bGVOYW1lGAcgASgJ",
            "Eg0KBVNoYXBlGAggASgNEgsKA0V4cBgJIAEoBBIPCgdFeHBOZXh0GAogASgE",
            "EhAKCFNodWlKaW5nGA8gASgEEgwKBEdvbGQYECABKAQSEAoIQmluZEdvbGQY",
            "ESABKAQSDgoGWmhhbmxpGBIgASgFEgsKA1ZJUBgTIAEoDRISCgpBbGxpYW5j",
            "ZUlEGBQgASgFEhIKCkN1ckNoYXB0ZXIYCyABKA0SEQoJQ29tRGVncmVlGAwg",
            "ASgNEhEKCUlzQ2FuTmV4dBgNIAEoCBIZChFOZXh0Q2hhcHRlclJld2FyZBgO",
            "IAEoCBIUCgxGaWdodFN1bUxpc3QYFSADKAUSGgoSQ2FpTGlhb0Z1QmVuQ291",
            "bnRzGBYgASgNEhgKEEVxdWlwRnVCZW5Db3VudHMYFyABKA0SEwoLRnJpZW5k",
            "UG9pbnQYGCABKA0SEgoKWWFuWGlQb2ludBgZIAEoDRIVCg1TZXJ2ZXJPcGVu",
            "RGF5GBogASgFEhMKC0lzTmV3UGxheWVyGBsgASgIEg4KBkJ1eU51bRgcIAEo",
            "BRITCgtTcGFjZUJhdHRsZRgdIAEoBRIaChJGaXJzdFJlY2hhcmdlU3RhdGUY",
            "ICABKAUSJAocRmlyc3RSZWNoYXJnZUFsbFJlY2VpdmVTdGF0ZRghIAEoBRIn",
            "Ch9Db250aW51ZVJlY2hhcmdlQWxsUmVjZWl2ZVN0YXRlGCIgASgFEhUKDVJl",
            "bWFpbmluZ1RpbWUYIyABKAMiIwoQUEJfQzJTQ2xpZW50TG9hZBIPCgdMb2dp",
            "bkluGAEgASgIInEKE1BCX1MyQ09mZmxpbmVSZXdhcmQSEwoLT2ZmTGluZVRp",
            "bWUYASABKAQSCwoDZXhwGAIgASgDEhAKCFNodWlKaW5nGAQgASgFEhMKC1Jl",
            "d2FyZENvdW50GAUgASgFEhEKCVNlbGxDb3VudBgGIAEoBSrqAgoMQWNjb3Vu",
            "dE1zZ0lEEhUKEUFjY291bnRNc2dJRF9OT05FEAASFAoQQzJTX1BMQVlFUl9M",
            "T0dJThAGEhQKEFMyQ19QTEFZRVJfTE9HSU4QBxIeChpTMkNfUExBWUVSX1FV",
            "SUNLX0xPR0lOX0tFWRAPEhoKFkMyU19QTEFZRVJfUVVJQ0tfTE9HSU4QDRIa",
            "ChZTMkNfUExBWUVSX1FVSUNLX0xPR0lOEA4SHAoYUzJDX1BMQVlFUl9SRVBM",
            "QUNFX0xPR0lOEBASFQoRQzJTX1BMQVlFUl9DUkVBVEUQBBIVChFTMkNfUExB",
            "WUVSX0NSRUFURRAFEhcKE1MyQ19ORVRfTE9HSU5fRVJST1IQCRIVChFDMlNf",
            "Q0xJRU5UX0xPQURFRBALEhYKElMyQ19QTEFZRVJfVVBHUkFERRAIEhMKD1My",
            "Q19QTEFZRVJfSU5GTxAKEhYKElMyQ19PRkZMSU5FX1JFV0FSRBAMYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Protobuf.AccountMsgID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_C2SPlayerLogin), global::Google.Protobuf.PB_C2SPlayerLogin.Parser, new[]{ "AccessToken", "Platform", "OS", "GameName", "SysVer", "DeviceModel", "Memory", "MAC" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2CPlayerLogin), global::Google.Protobuf.PB_S2CPlayerLogin.Parser, new[]{ "Login" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2CPlayerQuickLoginKey), global::Google.Protobuf.PB_S2CPlayerQuickLoginKey.Parser, new[]{ "QuickKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_C2SPlayerQuickLogin), global::Google.Protobuf.PB_C2SPlayerQuickLogin.Parser, new[]{ "ID", "QuickKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2CPlayerQuickLogin), global::Google.Protobuf.PB_S2CPlayerQuickLogin.Parser, new[]{ "Suc", "ErrCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_C2SPlayerCreate), global::Google.Protobuf.PB_C2SPlayerCreate.Parser, new[]{ "Name", "Sex", "Nation", "Shape", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2CPlayerCreate), global::Google.Protobuf.PB_S2CPlayerCreate.Parser, new[]{ "Hasplayer", "AccessToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_NetError), global::Google.Protobuf.PB_NetError.Parser, new[]{ "ErrCode", "ErrText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2CPlayerUpGrade), global::Google.Protobuf.PB_S2CPlayerUpGrade.Parser, new[]{ "Grade", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2CPlayerInfo), global::Google.Protobuf.PB_S2CPlayerInfo.Parser, new[]{ "ID", "Name", "HeroSumID", "Sex", "Grade", "Icon", "TitleName", "Shape", "Exp", "ExpNext", "ShuiJing", "Gold", "BindGold", "Zhanli", "VIP", "AllianceID", "CurChapter", "ComDegree", "IsCanNext", "NextChapterReward", "FightSumList", "CaiLiaoFuBenCounts", "EquipFuBenCounts", "FriendPoint", "YanXiPoint", "ServerOpenDay", "IsNewPlayer", "BuyNum", "SpaceBattle", "FirstRechargeState", "FirstRechargeAllReceiveState", "ContinueRechargeAllReceiveState", "RemainingTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_C2SClientLoad), global::Google.Protobuf.PB_C2SClientLoad.Parser, new[]{ "LoginIn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PB_S2COfflineReward), global::Google.Protobuf.PB_S2COfflineReward.Parser, new[]{ "OffLineTime", "Exp", "ShuiJing", "RewardCount", "SellCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///============以上不再客户端导表生成==============
  /// </summary>
  public enum AccountMsgID {
    [pbr::OriginalName("AccountMsgID_NONE")] None = 0,
    /// <summary>
    ///角色登录
    /// </summary>
    [pbr::OriginalName("C2S_PLAYER_LOGIN")] C2SPlayerLogin = 6,
    [pbr::OriginalName("S2C_PLAYER_LOGIN")] S2CPlayerLogin = 7,
    /// <summary>
    ///上面正常C2S_PLAYER_LOGIN角色登录时候,发送一个瞬连密钥
    /// </summary>
    [pbr::OriginalName("S2C_PLAYER_QUICK_LOGIN_KEY")] S2CPlayerQuickLoginKey = 15,
    /// <summary>
    ///角色快速登录(瞬连)
    /// </summary>
    [pbr::OriginalName("C2S_PLAYER_QUICK_LOGIN")] C2SPlayerQuickLogin = 13,
    /// <summary>
    ///角色快速登录结果
    /// </summary>
    [pbr::OriginalName("S2C_PLAYER_QUICK_LOGIN")] S2CPlayerQuickLogin = 14,
    /// <summary>
    ///通知玩家,角色被顶号登陆(在其他地方登陆)(PB_None)
    /// </summary>
    [pbr::OriginalName("S2C_PLAYER_REPLACE_LOGIN")] S2CPlayerReplaceLogin = 16,
    /// <summary>
    ///角色创建
    /// </summary>
    [pbr::OriginalName("C2S_PLAYER_CREATE")] C2SPlayerCreate = 4,
    [pbr::OriginalName("S2C_PLAYER_CREATE")] S2CPlayerCreate = 5,
    /// <summary>
    ///登录部分错误码
    /// </summary>
    [pbr::OriginalName("S2C_NET_LOGIN_ERROR")] S2CNetLoginError = 9,
    /// <summary>
    ///客户端加载完成
    /// </summary>
    [pbr::OriginalName("C2S_CLIENT_LOADED")] C2SClientLoaded = 11,
    /// <summary>
    ///玩家升级
    /// </summary>
    [pbr::OriginalName("S2C_PLAYER_UPGRADE")] S2CPlayerUpgrade = 8,
    /// <summary>
    ///玩家基础属性
    /// </summary>
    [pbr::OriginalName("S2C_PLAYER_INFO")] S2CPlayerInfo = 10,
    /// <summary>
    ///服务器向客户端发送离线奖励
    /// </summary>
    [pbr::OriginalName("S2C_OFFLINE_REWARD")] S2COfflineReward = 12,
  }

  #endregion

  #region Messages
  /// <summary>
  ///C2S_PLAYER_LOGIN
  /// </summary>
  public sealed partial class PB_C2SPlayerLogin : pb::IMessage<PB_C2SPlayerLogin> {
    private static readonly pb::MessageParser<PB_C2SPlayerLogin> _parser = new pb::MessageParser<PB_C2SPlayerLogin>(() => new PB_C2SPlayerLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_C2SPlayerLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerLogin(PB_C2SPlayerLogin other) : this() {
      accessToken_ = other.accessToken_;
      platform_ = other.platform_;
      oS_ = other.oS_;
      gameName_ = other.gameName_;
      sysVer_ = other.sysVer_;
      deviceModel_ = other.deviceModel_;
      memory_ = other.memory_;
      mAC_ = other.mAC_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerLogin Clone() {
      return new PB_C2SPlayerLogin(this);
    }

    /// <summary>Field number for the "AccessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    /// <summary>
    ///AccessToken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private string platform_ = "";
    /// <summary>
    ///sdk平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OS" field.</summary>
    public const int OSFieldNumber = 4;
    private string oS_ = "";
    /// <summary>
    ///操作系统
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OS {
      get { return oS_; }
      set {
        oS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameName" field.</summary>
    public const int GameNameFieldNumber = 5;
    private string gameName_ = "";
    /// <summary>
    ///游戏名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SysVer" field.</summary>
    public const int SysVerFieldNumber = 6;
    private string sysVer_ = "";
    /// <summary>
    ///操作系统版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SysVer {
      get { return sysVer_; }
      set {
        sysVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceModel" field.</summary>
    public const int DeviceModelFieldNumber = 7;
    private string deviceModel_ = "";
    /// <summary>
    ///品牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModel {
      get { return deviceModel_; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Memory" field.</summary>
    public const int MemoryFieldNumber = 8;
    private string memory_ = "";
    /// <summary>
    ///内存大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memory {
      get { return memory_; }
      set {
        memory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MAC" field.</summary>
    public const int MACFieldNumber = 9;
    private string mAC_ = "";
    /// <summary>
    ///MAC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MAC {
      get { return mAC_; }
      set {
        mAC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_C2SPlayerLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_C2SPlayerLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Platform != other.Platform) return false;
      if (OS != other.OS) return false;
      if (GameName != other.GameName) return false;
      if (SysVer != other.SysVer) return false;
      if (DeviceModel != other.DeviceModel) return false;
      if (Memory != other.Memory) return false;
      if (MAC != other.MAC) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (OS.Length != 0) hash ^= OS.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (SysVer.Length != 0) hash ^= SysVer.GetHashCode();
      if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
      if (Memory.Length != 0) hash ^= Memory.GetHashCode();
      if (MAC.Length != 0) hash ^= MAC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Platform);
      }
      if (OS.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OS);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GameName);
      }
      if (SysVer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SysVer);
      }
      if (DeviceModel.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeviceModel);
      }
      if (Memory.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Memory);
      }
      if (MAC.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MAC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (OS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OS);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (SysVer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SysVer);
      }
      if (DeviceModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      if (Memory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memory);
      }
      if (MAC.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MAC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_C2SPlayerLogin other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.OS.Length != 0) {
        OS = other.OS;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.SysVer.Length != 0) {
        SysVer = other.SysVer;
      }
      if (other.DeviceModel.Length != 0) {
        DeviceModel = other.DeviceModel;
      }
      if (other.Memory.Length != 0) {
        Memory = other.Memory;
      }
      if (other.MAC.Length != 0) {
        MAC = other.MAC;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 26: {
            Platform = input.ReadString();
            break;
          }
          case 34: {
            OS = input.ReadString();
            break;
          }
          case 42: {
            GameName = input.ReadString();
            break;
          }
          case 50: {
            SysVer = input.ReadString();
            break;
          }
          case 58: {
            DeviceModel = input.ReadString();
            break;
          }
          case 66: {
            Memory = input.ReadString();
            break;
          }
          case 74: {
            MAC = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///S2C_PLAYER_LOGIN
  /// </summary>
  public sealed partial class PB_S2CPlayerLogin : pb::IMessage<PB_S2CPlayerLogin> {
    private static readonly pb::MessageParser<PB_S2CPlayerLogin> _parser = new pb::MessageParser<PB_S2CPlayerLogin>(() => new PB_S2CPlayerLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2CPlayerLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerLogin(PB_S2CPlayerLogin other) : this() {
      login_ = other.login_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerLogin Clone() {
      return new PB_S2CPlayerLogin(this);
    }

    /// <summary>Field number for the "Login" field.</summary>
    public const int LoginFieldNumber = 1;
    private bool login_;
    /// <summary>
    ///加载标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Login {
      get { return login_; }
      set {
        login_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2CPlayerLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2CPlayerLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Login != other.Login) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Login != false) hash ^= Login.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Login != false) {
        output.WriteRawTag(8);
        output.WriteBool(Login);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Login != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2CPlayerLogin other) {
      if (other == null) {
        return;
      }
      if (other.Login != false) {
        Login = other.Login;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Login = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///S2C_PLAYER_QUICK_LOGIN_KEY
  /// </summary>
  public sealed partial class PB_S2CPlayerQuickLoginKey : pb::IMessage<PB_S2CPlayerQuickLoginKey> {
    private static readonly pb::MessageParser<PB_S2CPlayerQuickLoginKey> _parser = new pb::MessageParser<PB_S2CPlayerQuickLoginKey>(() => new PB_S2CPlayerQuickLoginKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2CPlayerQuickLoginKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerQuickLoginKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerQuickLoginKey(PB_S2CPlayerQuickLoginKey other) : this() {
      quickKey_ = other.quickKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerQuickLoginKey Clone() {
      return new PB_S2CPlayerQuickLoginKey(this);
    }

    /// <summary>Field number for the "QuickKey" field.</summary>
    public const int QuickKeyFieldNumber = 1;
    private ulong quickKey_;
    /// <summary>
    ///瞬连密钥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuickKey {
      get { return quickKey_; }
      set {
        quickKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2CPlayerQuickLoginKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2CPlayerQuickLoginKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuickKey != other.QuickKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QuickKey != 0UL) hash ^= QuickKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuickKey != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(QuickKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuickKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuickKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2CPlayerQuickLoginKey other) {
      if (other == null) {
        return;
      }
      if (other.QuickKey != 0UL) {
        QuickKey = other.QuickKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuickKey = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///C2S_PLAYER_QUICK_LOGIN
  /// </summary>
  public sealed partial class PB_C2SPlayerQuickLogin : pb::IMessage<PB_C2SPlayerQuickLogin> {
    private static readonly pb::MessageParser<PB_C2SPlayerQuickLogin> _parser = new pb::MessageParser<PB_C2SPlayerQuickLogin>(() => new PB_C2SPlayerQuickLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_C2SPlayerQuickLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerQuickLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerQuickLogin(PB_C2SPlayerQuickLogin other) : this() {
      iD_ = other.iD_;
      quickKey_ = other.quickKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerQuickLogin Clone() {
      return new PB_C2SPlayerQuickLogin(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "QuickKey" field.</summary>
    public const int QuickKeyFieldNumber = 2;
    private ulong quickKey_;
    /// <summary>
    ///瞬连密钥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuickKey {
      get { return quickKey_; }
      set {
        quickKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_C2SPlayerQuickLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_C2SPlayerQuickLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (QuickKey != other.QuickKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (QuickKey != 0UL) hash ^= QuickKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (QuickKey != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(QuickKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (QuickKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuickKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_C2SPlayerQuickLogin other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      if (other.QuickKey != 0UL) {
        QuickKey = other.QuickKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 16: {
            QuickKey = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///S2C_PLAYER_QUICK_LOGIN
  /// </summary>
  public sealed partial class PB_S2CPlayerQuickLogin : pb::IMessage<PB_S2CPlayerQuickLogin> {
    private static readonly pb::MessageParser<PB_S2CPlayerQuickLogin> _parser = new pb::MessageParser<PB_S2CPlayerQuickLogin>(() => new PB_S2CPlayerQuickLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2CPlayerQuickLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerQuickLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerQuickLogin(PB_S2CPlayerQuickLogin other) : this() {
      suc_ = other.suc_;
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerQuickLogin Clone() {
      return new PB_S2CPlayerQuickLogin(this);
    }

    /// <summary>Field number for the "Suc" field.</summary>
    public const int SucFieldNumber = 1;
    private bool suc_;
    /// <summary>
    ///True 瞬连成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Suc {
      get { return suc_; }
      set {
        suc_ = value;
      }
    }

    /// <summary>Field number for the "ErrCode" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private int errCode_;
    /// <summary>
    ///如果失败,则有失败的错误代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2CPlayerQuickLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2CPlayerQuickLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suc != other.Suc) return false;
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suc != false) hash ^= Suc.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Suc != false) {
        output.WriteRawTag(8);
        output.WriteBool(Suc);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suc != false) {
        size += 1 + 1;
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2CPlayerQuickLogin other) {
      if (other == null) {
        return;
      }
      if (other.Suc != false) {
        Suc = other.Suc;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Suc = input.ReadBool();
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_C2SPlayerCreate : pb::IMessage<PB_C2SPlayerCreate> {
    private static readonly pb::MessageParser<PB_C2SPlayerCreate> _parser = new pb::MessageParser<PB_C2SPlayerCreate>(() => new PB_C2SPlayerCreate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_C2SPlayerCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerCreate(PB_C2SPlayerCreate other) : this() {
      name_ = other.name_;
      sex_ = other.sex_;
      nation_ = other.nation_;
      shape_ = other.shape_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SPlayerCreate Clone() {
      return new PB_C2SPlayerCreate(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 2;
    private uint sex_;
    /// <summary>
    ///1:男 2:女
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "Nation" field.</summary>
    public const int NationFieldNumber = 3;
    private uint nation_;
    /// <summary>
    ///1:苏联 2:联盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nation {
      get { return nation_; }
      set {
        nation_ = value;
      }
    }

    /// <summary>Field number for the "Shape" field.</summary>
    public const int ShapeFieldNumber = 4;
    private uint shape_;
    /// <summary>
    ///造型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 5;
    private uint icon_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_C2SPlayerCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_C2SPlayerCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Sex != other.Sex) return false;
      if (Nation != other.Nation) return false;
      if (Shape != other.Shape) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Nation != 0) hash ^= Nation.GetHashCode();
      if (Shape != 0) hash ^= Shape.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sex);
      }
      if (Nation != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Nation);
      }
      if (Shape != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Shape);
      }
      if (Icon != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Nation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nation);
      }
      if (Shape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shape);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_C2SPlayerCreate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Nation != 0) {
        Nation = other.Nation;
      }
      if (other.Shape != 0) {
        Shape = other.Shape;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Sex = input.ReadUInt32();
            break;
          }
          case 24: {
            Nation = input.ReadUInt32();
            break;
          }
          case 32: {
            Shape = input.ReadUInt32();
            break;
          }
          case 40: {
            Icon = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_S2CPlayerCreate : pb::IMessage<PB_S2CPlayerCreate> {
    private static readonly pb::MessageParser<PB_S2CPlayerCreate> _parser = new pb::MessageParser<PB_S2CPlayerCreate>(() => new PB_S2CPlayerCreate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2CPlayerCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerCreate(PB_S2CPlayerCreate other) : this() {
      hasplayer_ = other.hasplayer_;
      accessToken_ = other.accessToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerCreate Clone() {
      return new PB_S2CPlayerCreate(this);
    }

    /// <summary>Field number for the "hasplayer" field.</summary>
    public const int HasplayerFieldNumber = 1;
    private uint hasplayer_;
    /// <summary>
    ///为2代表没有角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hasplayer {
      get { return hasplayer_; }
      set {
        hasplayer_ = value;
      }
    }

    /// <summary>Field number for the "AccessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2CPlayerCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2CPlayerCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hasplayer != other.Hasplayer) return false;
      if (AccessToken != other.AccessToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hasplayer != 0) hash ^= Hasplayer.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hasplayer != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Hasplayer);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hasplayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hasplayer);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2CPlayerCreate other) {
      if (other == null) {
        return;
      }
      if (other.Hasplayer != 0) {
        Hasplayer = other.Hasplayer;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Hasplayer = input.ReadUInt32();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///S2C_NET_LOGIN_ERROR
  /// </summary>
  public sealed partial class PB_NetError : pb::IMessage<PB_NetError> {
    private static readonly pb::MessageParser<PB_NetError> _parser = new pb::MessageParser<PB_NetError>(() => new PB_NetError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_NetError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_NetError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_NetError(PB_NetError other) : this() {
      errCode_ = other.errCode_;
      errText_ = other.errText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_NetError Clone() {
      return new PB_NetError(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private uint errCode_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "errText" field.</summary>
    public const int ErrTextFieldNumber = 2;
    private string errText_ = "";
    /// <summary>
    ///错误码为0时候,有错误文字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrText {
      get { return errText_; }
      set {
        errText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_NetError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_NetError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (ErrText != other.ErrText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (ErrText.Length != 0) hash ^= ErrText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ErrCode);
      }
      if (ErrText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrCode);
      }
      if (ErrText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_NetError other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.ErrText.Length != 0) {
        ErrText = other.ErrText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrCode = input.ReadUInt32();
            break;
          }
          case 18: {
            ErrText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_S2CPlayerUpGrade : pb::IMessage<PB_S2CPlayerUpGrade> {
    private static readonly pb::MessageParser<PB_S2CPlayerUpGrade> _parser = new pb::MessageParser<PB_S2CPlayerUpGrade>(() => new PB_S2CPlayerUpGrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2CPlayerUpGrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerUpGrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerUpGrade(PB_S2CPlayerUpGrade other) : this() {
      grade_ = other.grade_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerUpGrade Clone() {
      return new PB_S2CPlayerUpGrade(this);
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 1;
    private uint grade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private ulong exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2CPlayerUpGrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2CPlayerUpGrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Grade != other.Grade) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Grade != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Grade);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2CPlayerUpGrade other) {
      if (other == null) {
        return;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Grade = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///S2C_PLAYER_INFO
  /// </summary>
  public sealed partial class PB_S2CPlayerInfo : pb::IMessage<PB_S2CPlayerInfo> {
    private static readonly pb::MessageParser<PB_S2CPlayerInfo> _parser = new pb::MessageParser<PB_S2CPlayerInfo>(() => new PB_S2CPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2CPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerInfo(PB_S2CPlayerInfo other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      heroSumID_ = other.heroSumID_;
      sex_ = other.sex_;
      grade_ = other.grade_;
      icon_ = other.icon_;
      titleName_ = other.titleName_;
      shape_ = other.shape_;
      exp_ = other.exp_;
      expNext_ = other.expNext_;
      shuiJing_ = other.shuiJing_;
      gold_ = other.gold_;
      bindGold_ = other.bindGold_;
      zhanli_ = other.zhanli_;
      vIP_ = other.vIP_;
      allianceID_ = other.allianceID_;
      curChapter_ = other.curChapter_;
      comDegree_ = other.comDegree_;
      isCanNext_ = other.isCanNext_;
      nextChapterReward_ = other.nextChapterReward_;
      fightSumList_ = other.fightSumList_.Clone();
      caiLiaoFuBenCounts_ = other.caiLiaoFuBenCounts_;
      equipFuBenCounts_ = other.equipFuBenCounts_;
      friendPoint_ = other.friendPoint_;
      yanXiPoint_ = other.yanXiPoint_;
      serverOpenDay_ = other.serverOpenDay_;
      isNewPlayer_ = other.isNewPlayer_;
      buyNum_ = other.buyNum_;
      spaceBattle_ = other.spaceBattle_;
      firstRechargeState_ = other.firstRechargeState_;
      firstRechargeAllReceiveState_ = other.firstRechargeAllReceiveState_;
      continueRechargeAllReceiveState_ = other.continueRechargeAllReceiveState_;
      remainingTime_ = other.remainingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2CPlayerInfo Clone() {
      return new PB_S2CPlayerInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///玩家姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeroSumID" field.</summary>
    public const int HeroSumIDFieldNumber = 3;
    private uint heroSumID_;
    /// <summary>
    ///玩家在宠物中的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroSumID {
      get { return heroSumID_; }
      set {
        heroSumID_ = value;
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 4;
    private uint sex_;
    /// <summary>
    ///玩家性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "Grade" field.</summary>
    public const int GradeFieldNumber = 5;
    private uint grade_;
    /// <summary>
    ///玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 6;
    private uint icon_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "TitleName" field.</summary>
    public const int TitleNameFieldNumber = 7;
    private string titleName_ = "";
    /// <summary>
    ///称号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleName {
      get { return titleName_; }
      set {
        titleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Shape" field.</summary>
    public const int ShapeFieldNumber = 8;
    private uint shape_;
    /// <summary>
    ///造型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 9;
    private ulong exp_;
    /// <summary>
    ///玩家经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "ExpNext" field.</summary>
    public const int ExpNextFieldNumber = 10;
    private ulong expNext_;
    /// <summary>
    ///升级所需经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpNext {
      get { return expNext_; }
      set {
        expNext_ = value;
      }
    }

    /// <summary>Field number for the "ShuiJing" field.</summary>
    public const int ShuiJingFieldNumber = 15;
    private ulong shuiJing_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShuiJing {
      get { return shuiJing_; }
      set {
        shuiJing_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 16;
    private ulong gold_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "BindGold" field.</summary>
    public const int BindGoldFieldNumber = 17;
    private ulong bindGold_;
    /// <summary>
    ///绑定钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BindGold {
      get { return bindGold_; }
      set {
        bindGold_ = value;
      }
    }

    /// <summary>Field number for the "Zhanli" field.</summary>
    public const int ZhanliFieldNumber = 18;
    private int zhanli_;
    /// <summary>
    ///战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Zhanli {
      get { return zhanli_; }
      set {
        zhanli_ = value;
      }
    }

    /// <summary>Field number for the "VIP" field.</summary>
    public const int VIPFieldNumber = 19;
    private uint vIP_;
    /// <summary>
    ///VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VIP {
      get { return vIP_; }
      set {
        vIP_ = value;
      }
    }

    /// <summary>Field number for the "AllianceID" field.</summary>
    public const int AllianceIDFieldNumber = 20;
    private int allianceID_;
    /// <summary>
    ///联盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllianceID {
      get { return allianceID_; }
      set {
        allianceID_ = value;
      }
    }

    /// <summary>Field number for the "CurChapter" field.</summary>
    public const int CurChapterFieldNumber = 11;
    private uint curChapter_;
    /// <summary>
    ///当前所处章节
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurChapter {
      get { return curChapter_; }
      set {
        curChapter_ = value;
      }
    }

    /// <summary>Field number for the "ComDegree" field.</summary>
    public const int ComDegreeFieldNumber = 12;
    private uint comDegree_;
    /// <summary>
    ///当前章节进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComDegree {
      get { return comDegree_; }
      set {
        comDegree_ = value;
      }
    }

    /// <summary>Field number for the "IsCanNext" field.</summary>
    public const int IsCanNextFieldNumber = 13;
    private bool isCanNext_;
    /// <summary>
    ///能否通向下一关True:能,False:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCanNext {
      get { return isCanNext_; }
      set {
        isCanNext_ = value;
      }
    }

    /// <summary>Field number for the "NextChapterReward" field.</summary>
    public const int NextChapterRewardFieldNumber = 14;
    private bool nextChapterReward_;
    /// <summary>
    ///能否领取过关奖励True:能,False:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NextChapterReward {
      get { return nextChapterReward_; }
      set {
        nextChapterReward_ = value;
      }
    }

    /// <summary>Field number for the "FightSumList" field.</summary>
    public const int FightSumListFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_fightSumList_codec
        = pb::FieldCodec.ForInt32(170);
    private readonly pbc::RepeatedField<int> fightSumList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///激活伙伴id的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FightSumList {
      get { return fightSumList_; }
    }

    /// <summary>Field number for the "CaiLiaoFuBenCounts" field.</summary>
    public const int CaiLiaoFuBenCountsFieldNumber = 22;
    private uint caiLiaoFuBenCounts_;
    /// <summary>
    ///材料副本挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CaiLiaoFuBenCounts {
      get { return caiLiaoFuBenCounts_; }
      set {
        caiLiaoFuBenCounts_ = value;
      }
    }

    /// <summary>Field number for the "EquipFuBenCounts" field.</summary>
    public const int EquipFuBenCountsFieldNumber = 23;
    private uint equipFuBenCounts_;
    /// <summary>
    ///装备副本挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipFuBenCounts {
      get { return equipFuBenCounts_; }
      set {
        equipFuBenCounts_ = value;
      }
    }

    /// <summary>Field number for the "FriendPoint" field.</summary>
    public const int FriendPointFieldNumber = 24;
    private uint friendPoint_;
    /// <summary>
    ///友情点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendPoint {
      get { return friendPoint_; }
      set {
        friendPoint_ = value;
      }
    }

    /// <summary>Field number for the "YanXiPoint" field.</summary>
    public const int YanXiPointFieldNumber = 25;
    private uint yanXiPoint_;
    /// <summary>
    ///演习点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint YanXiPoint {
      get { return yanXiPoint_; }
      set {
        yanXiPoint_ = value;
      }
    }

    /// <summary>Field number for the "ServerOpenDay" field.</summary>
    public const int ServerOpenDayFieldNumber = 26;
    private int serverOpenDay_;
    /// <summary>
    ///服务器开启的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerOpenDay {
      get { return serverOpenDay_; }
      set {
        serverOpenDay_ = value;
      }
    }

    /// <summary>Field number for the "IsNewPlayer" field.</summary>
    public const int IsNewPlayerFieldNumber = 27;
    private bool isNewPlayer_;
    /// <summary>
    ///是否是新玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewPlayer {
      get { return isNewPlayer_; }
      set {
        isNewPlayer_ = value;
      }
    }

    /// <summary>Field number for the "BuyNum" field.</summary>
    public const int BuyNumFieldNumber = 28;
    private int buyNum_;
    /// <summary>
    ///钻石抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyNum {
      get { return buyNum_; }
      set {
        buyNum_ = value;
      }
    }

    /// <summary>Field number for the "SpaceBattle" field.</summary>
    public const int SpaceBattleFieldNumber = 29;
    private int spaceBattle_;
    /// <summary>
    ///时空战场通关数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceBattle {
      get { return spaceBattle_; }
      set {
        spaceBattle_ = value;
      }
    }

    /// <summary>Field number for the "FirstRechargeState" field.</summary>
    public const int FirstRechargeStateFieldNumber = 32;
    private int firstRechargeState_;
    /// <summary>
    ///总充值金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstRechargeState {
      get { return firstRechargeState_; }
      set {
        firstRechargeState_ = value;
      }
    }

    /// <summary>Field number for the "FirstRechargeAllReceiveState" field.</summary>
    public const int FirstRechargeAllReceiveStateFieldNumber = 33;
    private int firstRechargeAllReceiveState_;
    /// <summary>
    ///首冲领取全部奖励没
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstRechargeAllReceiveState {
      get { return firstRechargeAllReceiveState_; }
      set {
        firstRechargeAllReceiveState_ = value;
      }
    }

    /// <summary>Field number for the "ContinueRechargeAllReceiveState" field.</summary>
    public const int ContinueRechargeAllReceiveStateFieldNumber = 34;
    private int continueRechargeAllReceiveState_;
    /// <summary>
    ///累充领取全部奖励没
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContinueRechargeAllReceiveState {
      get { return continueRechargeAllReceiveState_; }
      set {
        continueRechargeAllReceiveState_ = value;
      }
    }

    /// <summary>Field number for the "RemainingTime" field.</summary>
    public const int RemainingTimeFieldNumber = 35;
    private long remainingTime_;
    /// <summary>
    ///下一个累充到期秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainingTime {
      get { return remainingTime_; }
      set {
        remainingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2CPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2CPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (HeroSumID != other.HeroSumID) return false;
      if (Sex != other.Sex) return false;
      if (Grade != other.Grade) return false;
      if (Icon != other.Icon) return false;
      if (TitleName != other.TitleName) return false;
      if (Shape != other.Shape) return false;
      if (Exp != other.Exp) return false;
      if (ExpNext != other.ExpNext) return false;
      if (ShuiJing != other.ShuiJing) return false;
      if (Gold != other.Gold) return false;
      if (BindGold != other.BindGold) return false;
      if (Zhanli != other.Zhanli) return false;
      if (VIP != other.VIP) return false;
      if (AllianceID != other.AllianceID) return false;
      if (CurChapter != other.CurChapter) return false;
      if (ComDegree != other.ComDegree) return false;
      if (IsCanNext != other.IsCanNext) return false;
      if (NextChapterReward != other.NextChapterReward) return false;
      if(!fightSumList_.Equals(other.fightSumList_)) return false;
      if (CaiLiaoFuBenCounts != other.CaiLiaoFuBenCounts) return false;
      if (EquipFuBenCounts != other.EquipFuBenCounts) return false;
      if (FriendPoint != other.FriendPoint) return false;
      if (YanXiPoint != other.YanXiPoint) return false;
      if (ServerOpenDay != other.ServerOpenDay) return false;
      if (IsNewPlayer != other.IsNewPlayer) return false;
      if (BuyNum != other.BuyNum) return false;
      if (SpaceBattle != other.SpaceBattle) return false;
      if (FirstRechargeState != other.FirstRechargeState) return false;
      if (FirstRechargeAllReceiveState != other.FirstRechargeAllReceiveState) return false;
      if (ContinueRechargeAllReceiveState != other.ContinueRechargeAllReceiveState) return false;
      if (RemainingTime != other.RemainingTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeroSumID != 0) hash ^= HeroSumID.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (TitleName.Length != 0) hash ^= TitleName.GetHashCode();
      if (Shape != 0) hash ^= Shape.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (ExpNext != 0UL) hash ^= ExpNext.GetHashCode();
      if (ShuiJing != 0UL) hash ^= ShuiJing.GetHashCode();
      if (Gold != 0UL) hash ^= Gold.GetHashCode();
      if (BindGold != 0UL) hash ^= BindGold.GetHashCode();
      if (Zhanli != 0) hash ^= Zhanli.GetHashCode();
      if (VIP != 0) hash ^= VIP.GetHashCode();
      if (AllianceID != 0) hash ^= AllianceID.GetHashCode();
      if (CurChapter != 0) hash ^= CurChapter.GetHashCode();
      if (ComDegree != 0) hash ^= ComDegree.GetHashCode();
      if (IsCanNext != false) hash ^= IsCanNext.GetHashCode();
      if (NextChapterReward != false) hash ^= NextChapterReward.GetHashCode();
      hash ^= fightSumList_.GetHashCode();
      if (CaiLiaoFuBenCounts != 0) hash ^= CaiLiaoFuBenCounts.GetHashCode();
      if (EquipFuBenCounts != 0) hash ^= EquipFuBenCounts.GetHashCode();
      if (FriendPoint != 0) hash ^= FriendPoint.GetHashCode();
      if (YanXiPoint != 0) hash ^= YanXiPoint.GetHashCode();
      if (ServerOpenDay != 0) hash ^= ServerOpenDay.GetHashCode();
      if (IsNewPlayer != false) hash ^= IsNewPlayer.GetHashCode();
      if (BuyNum != 0) hash ^= BuyNum.GetHashCode();
      if (SpaceBattle != 0) hash ^= SpaceBattle.GetHashCode();
      if (FirstRechargeState != 0) hash ^= FirstRechargeState.GetHashCode();
      if (FirstRechargeAllReceiveState != 0) hash ^= FirstRechargeAllReceiveState.GetHashCode();
      if (ContinueRechargeAllReceiveState != 0) hash ^= ContinueRechargeAllReceiveState.GetHashCode();
      if (RemainingTime != 0L) hash ^= RemainingTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HeroSumID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroSumID);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Sex);
      }
      if (Grade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Grade);
      }
      if (Icon != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Icon);
      }
      if (TitleName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TitleName);
      }
      if (Shape != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Shape);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Exp);
      }
      if (ExpNext != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(ExpNext);
      }
      if (CurChapter != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CurChapter);
      }
      if (ComDegree != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ComDegree);
      }
      if (IsCanNext != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsCanNext);
      }
      if (NextChapterReward != false) {
        output.WriteRawTag(112);
        output.WriteBool(NextChapterReward);
      }
      if (ShuiJing != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(ShuiJing);
      }
      if (Gold != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(Gold);
      }
      if (BindGold != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(BindGold);
      }
      if (Zhanli != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Zhanli);
      }
      if (VIP != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(VIP);
      }
      if (AllianceID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(AllianceID);
      }
      fightSumList_.WriteTo(output, _repeated_fightSumList_codec);
      if (CaiLiaoFuBenCounts != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(CaiLiaoFuBenCounts);
      }
      if (EquipFuBenCounts != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(EquipFuBenCounts);
      }
      if (FriendPoint != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(FriendPoint);
      }
      if (YanXiPoint != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(YanXiPoint);
      }
      if (ServerOpenDay != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ServerOpenDay);
      }
      if (IsNewPlayer != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsNewPlayer);
      }
      if (BuyNum != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(BuyNum);
      }
      if (SpaceBattle != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SpaceBattle);
      }
      if (FirstRechargeState != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(FirstRechargeState);
      }
      if (FirstRechargeAllReceiveState != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(FirstRechargeAllReceiveState);
      }
      if (ContinueRechargeAllReceiveState != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ContinueRechargeAllReceiveState);
      }
      if (RemainingTime != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(RemainingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeroSumID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroSumID);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (TitleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleName);
      }
      if (Shape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shape);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (ExpNext != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpNext);
      }
      if (ShuiJing != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShuiJing);
      }
      if (Gold != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Gold);
      }
      if (BindGold != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BindGold);
      }
      if (Zhanli != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Zhanli);
      }
      if (VIP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VIP);
      }
      if (AllianceID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AllianceID);
      }
      if (CurChapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurChapter);
      }
      if (ComDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ComDegree);
      }
      if (IsCanNext != false) {
        size += 1 + 1;
      }
      if (NextChapterReward != false) {
        size += 1 + 1;
      }
      size += fightSumList_.CalculateSize(_repeated_fightSumList_codec);
      if (CaiLiaoFuBenCounts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CaiLiaoFuBenCounts);
      }
      if (EquipFuBenCounts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipFuBenCounts);
      }
      if (FriendPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FriendPoint);
      }
      if (YanXiPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(YanXiPoint);
      }
      if (ServerOpenDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerOpenDay);
      }
      if (IsNewPlayer != false) {
        size += 2 + 1;
      }
      if (BuyNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuyNum);
      }
      if (SpaceBattle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpaceBattle);
      }
      if (FirstRechargeState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirstRechargeState);
      }
      if (FirstRechargeAllReceiveState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirstRechargeAllReceiveState);
      }
      if (ContinueRechargeAllReceiveState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ContinueRechargeAllReceiveState);
      }
      if (RemainingTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RemainingTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2CPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeroSumID != 0) {
        HeroSumID = other.HeroSumID;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.TitleName.Length != 0) {
        TitleName = other.TitleName;
      }
      if (other.Shape != 0) {
        Shape = other.Shape;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.ExpNext != 0UL) {
        ExpNext = other.ExpNext;
      }
      if (other.ShuiJing != 0UL) {
        ShuiJing = other.ShuiJing;
      }
      if (other.Gold != 0UL) {
        Gold = other.Gold;
      }
      if (other.BindGold != 0UL) {
        BindGold = other.BindGold;
      }
      if (other.Zhanli != 0) {
        Zhanli = other.Zhanli;
      }
      if (other.VIP != 0) {
        VIP = other.VIP;
      }
      if (other.AllianceID != 0) {
        AllianceID = other.AllianceID;
      }
      if (other.CurChapter != 0) {
        CurChapter = other.CurChapter;
      }
      if (other.ComDegree != 0) {
        ComDegree = other.ComDegree;
      }
      if (other.IsCanNext != false) {
        IsCanNext = other.IsCanNext;
      }
      if (other.NextChapterReward != false) {
        NextChapterReward = other.NextChapterReward;
      }
      fightSumList_.Add(other.fightSumList_);
      if (other.CaiLiaoFuBenCounts != 0) {
        CaiLiaoFuBenCounts = other.CaiLiaoFuBenCounts;
      }
      if (other.EquipFuBenCounts != 0) {
        EquipFuBenCounts = other.EquipFuBenCounts;
      }
      if (other.FriendPoint != 0) {
        FriendPoint = other.FriendPoint;
      }
      if (other.YanXiPoint != 0) {
        YanXiPoint = other.YanXiPoint;
      }
      if (other.ServerOpenDay != 0) {
        ServerOpenDay = other.ServerOpenDay;
      }
      if (other.IsNewPlayer != false) {
        IsNewPlayer = other.IsNewPlayer;
      }
      if (other.BuyNum != 0) {
        BuyNum = other.BuyNum;
      }
      if (other.SpaceBattle != 0) {
        SpaceBattle = other.SpaceBattle;
      }
      if (other.FirstRechargeState != 0) {
        FirstRechargeState = other.FirstRechargeState;
      }
      if (other.FirstRechargeAllReceiveState != 0) {
        FirstRechargeAllReceiveState = other.FirstRechargeAllReceiveState;
      }
      if (other.ContinueRechargeAllReceiveState != 0) {
        ContinueRechargeAllReceiveState = other.ContinueRechargeAllReceiveState;
      }
      if (other.RemainingTime != 0L) {
        RemainingTime = other.RemainingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HeroSumID = input.ReadUInt32();
            break;
          }
          case 32: {
            Sex = input.ReadUInt32();
            break;
          }
          case 40: {
            Grade = input.ReadUInt32();
            break;
          }
          case 48: {
            Icon = input.ReadUInt32();
            break;
          }
          case 58: {
            TitleName = input.ReadString();
            break;
          }
          case 64: {
            Shape = input.ReadUInt32();
            break;
          }
          case 72: {
            Exp = input.ReadUInt64();
            break;
          }
          case 80: {
            ExpNext = input.ReadUInt64();
            break;
          }
          case 88: {
            CurChapter = input.ReadUInt32();
            break;
          }
          case 96: {
            ComDegree = input.ReadUInt32();
            break;
          }
          case 104: {
            IsCanNext = input.ReadBool();
            break;
          }
          case 112: {
            NextChapterReward = input.ReadBool();
            break;
          }
          case 120: {
            ShuiJing = input.ReadUInt64();
            break;
          }
          case 128: {
            Gold = input.ReadUInt64();
            break;
          }
          case 136: {
            BindGold = input.ReadUInt64();
            break;
          }
          case 144: {
            Zhanli = input.ReadInt32();
            break;
          }
          case 152: {
            VIP = input.ReadUInt32();
            break;
          }
          case 160: {
            AllianceID = input.ReadInt32();
            break;
          }
          case 170:
          case 168: {
            fightSumList_.AddEntriesFrom(input, _repeated_fightSumList_codec);
            break;
          }
          case 176: {
            CaiLiaoFuBenCounts = input.ReadUInt32();
            break;
          }
          case 184: {
            EquipFuBenCounts = input.ReadUInt32();
            break;
          }
          case 192: {
            FriendPoint = input.ReadUInt32();
            break;
          }
          case 200: {
            YanXiPoint = input.ReadUInt32();
            break;
          }
          case 208: {
            ServerOpenDay = input.ReadInt32();
            break;
          }
          case 216: {
            IsNewPlayer = input.ReadBool();
            break;
          }
          case 224: {
            BuyNum = input.ReadInt32();
            break;
          }
          case 232: {
            SpaceBattle = input.ReadInt32();
            break;
          }
          case 256: {
            FirstRechargeState = input.ReadInt32();
            break;
          }
          case 264: {
            FirstRechargeAllReceiveState = input.ReadInt32();
            break;
          }
          case 272: {
            ContinueRechargeAllReceiveState = input.ReadInt32();
            break;
          }
          case 280: {
            RemainingTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_C2SClientLoad : pb::IMessage<PB_C2SClientLoad> {
    private static readonly pb::MessageParser<PB_C2SClientLoad> _parser = new pb::MessageParser<PB_C2SClientLoad>(() => new PB_C2SClientLoad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_C2SClientLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SClientLoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SClientLoad(PB_C2SClientLoad other) : this() {
      loginIn_ = other.loginIn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_C2SClientLoad Clone() {
      return new PB_C2SClientLoad(this);
    }

    /// <summary>Field number for the "LoginIn" field.</summary>
    public const int LoginInFieldNumber = 1;
    private bool loginIn_;
    /// <summary>
    ///客户端加载完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoginIn {
      get { return loginIn_; }
      set {
        loginIn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_C2SClientLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_C2SClientLoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginIn != other.LoginIn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginIn != false) hash ^= LoginIn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginIn != false) {
        output.WriteRawTag(8);
        output.WriteBool(LoginIn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginIn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_C2SClientLoad other) {
      if (other == null) {
        return;
      }
      if (other.LoginIn != false) {
        LoginIn = other.LoginIn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LoginIn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端上线后,服务器向客户端推送的挂机收益新协议
  /// </summary>
  public sealed partial class PB_S2COfflineReward : pb::IMessage<PB_S2COfflineReward> {
    private static readonly pb::MessageParser<PB_S2COfflineReward> _parser = new pb::MessageParser<PB_S2COfflineReward>(() => new PB_S2COfflineReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_S2COfflineReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.LoginReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2COfflineReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2COfflineReward(PB_S2COfflineReward other) : this() {
      offLineTime_ = other.offLineTime_;
      exp_ = other.exp_;
      shuiJing_ = other.shuiJing_;
      rewardCount_ = other.rewardCount_;
      sellCount_ = other.sellCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_S2COfflineReward Clone() {
      return new PB_S2COfflineReward(this);
    }

    /// <summary>Field number for the "OffLineTime" field.</summary>
    public const int OffLineTimeFieldNumber = 1;
    private ulong offLineTime_;
    /// <summary>
    ///离线时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OffLineTime {
      get { return offLineTime_; }
      set {
        offLineTime_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private long exp_;
    /// <summary>
    ///主角伙伴经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "ShuiJing" field.</summary>
    public const int ShuiJingFieldNumber = 4;
    private int shuiJing_;
    /// <summary>
    ///int64 summexp					= 3;	//其他伙伴经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShuiJing {
      get { return shuiJing_; }
      set {
        shuiJing_ = value;
      }
    }

    /// <summary>Field number for the "RewardCount" field.</summary>
    public const int RewardCountFieldNumber = 5;
    private int rewardCount_;
    /// <summary>
    ///奖励物品的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardCount {
      get { return rewardCount_; }
      set {
        rewardCount_ = value;
      }
    }

    /// <summary>Field number for the "SellCount" field.</summary>
    public const int SellCountFieldNumber = 6;
    private int sellCount_;
    /// <summary>
    ///出售物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellCount {
      get { return sellCount_; }
      set {
        sellCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_S2COfflineReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_S2COfflineReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffLineTime != other.OffLineTime) return false;
      if (Exp != other.Exp) return false;
      if (ShuiJing != other.ShuiJing) return false;
      if (RewardCount != other.RewardCount) return false;
      if (SellCount != other.SellCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffLineTime != 0UL) hash ^= OffLineTime.GetHashCode();
      if (Exp != 0L) hash ^= Exp.GetHashCode();
      if (ShuiJing != 0) hash ^= ShuiJing.GetHashCode();
      if (RewardCount != 0) hash ^= RewardCount.GetHashCode();
      if (SellCount != 0) hash ^= SellCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffLineTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OffLineTime);
      }
      if (Exp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Exp);
      }
      if (ShuiJing != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShuiJing);
      }
      if (RewardCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RewardCount);
      }
      if (SellCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SellCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffLineTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OffLineTime);
      }
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (ShuiJing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShuiJing);
      }
      if (RewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardCount);
      }
      if (SellCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_S2COfflineReward other) {
      if (other == null) {
        return;
      }
      if (other.OffLineTime != 0UL) {
        OffLineTime = other.OffLineTime;
      }
      if (other.Exp != 0L) {
        Exp = other.Exp;
      }
      if (other.ShuiJing != 0) {
        ShuiJing = other.ShuiJing;
      }
      if (other.RewardCount != 0) {
        RewardCount = other.RewardCount;
      }
      if (other.SellCount != 0) {
        SellCount = other.SellCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OffLineTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Exp = input.ReadInt64();
            break;
          }
          case 32: {
            ShuiJing = input.ReadInt32();
            break;
          }
          case 40: {
            RewardCount = input.ReadInt32();
            break;
          }
          case 48: {
            SellCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
