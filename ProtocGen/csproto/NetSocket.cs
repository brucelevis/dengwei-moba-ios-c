// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NetSocket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf {

  /// <summary>Holder for reflection information generated from NetSocket.proto</summary>
  public static partial class NetSocketReflection {

    #region Descriptor
    /// <summary>File descriptor for NetSocket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetSocketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9OZXRTb2NrZXQucHJvdG8SD0dvb2dsZS5Qcm90b2J1ZiIKCghLY3BfTm9u",
            "ZSIjCgtLY3BfQ29ubmVjdBIUCgxxdWlja2Nvbm5lY3QYASABKAUiHgoOS2Nw",
            "X0Rpc0Nvbm5lY3QSDAoEdHlwZRgBIAEoBSIZCghLY3BfUGluZxINCgVpbmRl",
            "eBgBIAEoBSIyChFLY3BfT25lRnNQYWNrRGF0YRINCgVpbmRleBgBIAEoBRIO",
            "CgZmc2RhdGEYAiABKAwibgoPS2NwX0ZzUGFja0RhdGFzEjYKCmZzcGFja2Rh",
            "dGEYASADKAsyIi5Hb29nbGUuUHJvdG9idWYuS2NwX09uZUZzUGFja0RhdGES",
            "EAoIYWNraW5kZXgYAiABKAUSEQoJc2VuZGluZGV4GAMgASgFIjcKD0tjcF9O",
            "b3RBY2tJbmRleBISCgpzdGFydGluZGV4GAEgASgFEhAKCGVuZGluZGV4GAIg",
            "ASgFKrcBCglLY3BfTXNnSUQSEgoOS2NwX01zZ0lEX05PTkUQABINCglDT05O",
            "RUNURUQQARIQCgxSRV9DT05ORUNURUQQCRISCg5DT05ORUNURURfRkFJTBAC",
            "EhEKDURJU19DT05ORUNURUQQAxIOCgpQSU5HX0lOREVYEAQSDwoLRlNfSU5G",
            "T19PTkUQBRINCglGU19JTkZPX1MQBhIRCg1OT1RfQUNLX0lOREVYEAcSCwoH",
            "U1lOX0FDSxAIKmMKDEtjcF9OZXRfVHlwZRIVChFLY3BfTmV0X1R5cGVfTk9O",
            "RRAAEg4KCkRTQ19OT1JNQUwQARIaChZEU0NfRVJSX09VVF9NQVhfRlNfTlVN",
            "EAISEAoMRFNDX0VSUl9BRERSEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Protobuf.Kcp_MsgID), typeof(global::Google.Protobuf.Kcp_Net_Type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_None), global::Google.Protobuf.Kcp_None.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_Connect), global::Google.Protobuf.Kcp_Connect.Parser, new[]{ "Quickconnect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_DisConnect), global::Google.Protobuf.Kcp_DisConnect.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_Ping), global::Google.Protobuf.Kcp_Ping.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_OneFsPackData), global::Google.Protobuf.Kcp_OneFsPackData.Parser, new[]{ "Index", "Fsdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_FsPackDatas), global::Google.Protobuf.Kcp_FsPackDatas.Parser, new[]{ "Fspackdata", "Ackindex", "Sendindex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Kcp_NotAckIndex), global::Google.Protobuf.Kcp_NotAckIndex.Parser, new[]{ "Startindex", "Endindex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Kcp_MsgID {
    [pbr::OriginalName("Kcp_MsgID_NONE")] None = 0,
    [pbr::OriginalName("CONNECTED")] Connected = 1,
    /// <summary>
    ///瞬连成功
    /// </summary>
    [pbr::OriginalName("RE_CONNECTED")] ReConnected = 9,
    [pbr::OriginalName("CONNECTED_FAIL")] ConnectedFail = 2,
    [pbr::OriginalName("DIS_CONNECTED")] DisConnected = 3,
    /// <summary>
    ///探知Ping值
    /// </summary>
    [pbr::OriginalName("PING_INDEX")] PingIndex = 4,
    /// <summary>
    ///一帧信息
    /// </summary>
    [pbr::OriginalName("FS_INFO_ONE")] FsInfoOne = 5,
    /// <summary>
    ///多帧信息结合	
    /// </summary>
    [pbr::OriginalName("FS_INFO_S")] FsInfoS = 6,
    /// <summary>
    ///非ACK序号请求
    /// </summary>
    [pbr::OriginalName("NOT_ACK_INDEX")] NotAckIndex = 7,
    /// <summary>
    ///同步ACK状态(和超时重查一样,都是客户端驱动)
    /// </summary>
    [pbr::OriginalName("SYN_ACK")] SynAck = 8,
  }

  public enum Kcp_Net_Type {
    [pbr::OriginalName("Kcp_Net_Type_NONE")] None = 0,
    /// <summary>
    ///DisConnect:正常断线
    /// </summary>
    [pbr::OriginalName("DSC_NORMAL")] DscNormal = 1,
    /// <summary>
    ///DisConnect:数据传输超时断线(对方最新的发送序号超出正在接收处理的包序号N个)
    /// </summary>
    [pbr::OriginalName("DSC_ERR_OUT_MAX_FS_NUM")] DscErrOutMaxFsNum = 2,
    /// <summary>
    ///DisConnect:身份未验证,错误IP地址
    /// </summary>
    [pbr::OriginalName("DSC_ERR_ADDR")] DscErrAddr = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Kcp_None : pb::IMessage<Kcp_None> {
    private static readonly pb::MessageParser<Kcp_None> _parser = new pb::MessageParser<Kcp_None>(() => new Kcp_None());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_None> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_None() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_None(Kcp_None other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_None Clone() {
      return new Kcp_None(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_None);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_None other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_None other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///CONNECTED,RE_CONNECTED
  /// </summary>
  public sealed partial class Kcp_Connect : pb::IMessage<Kcp_Connect> {
    private static readonly pb::MessageParser<Kcp_Connect> _parser = new pb::MessageParser<Kcp_Connect>(() => new Kcp_Connect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_Connect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_Connect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_Connect(Kcp_Connect other) : this() {
      quickconnect_ = other.quickconnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_Connect Clone() {
      return new Kcp_Connect(this);
    }

    /// <summary>Field number for the "quickconnect" field.</summary>
    public const int QuickconnectFieldNumber = 1;
    private int quickconnect_;
    /// <summary>
    ///快速重连/身份重新认证/更新IP地址时候使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quickconnect {
      get { return quickconnect_; }
      set {
        quickconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_Connect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_Connect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quickconnect != other.Quickconnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Quickconnect != 0) hash ^= Quickconnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Quickconnect != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Quickconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quickconnect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quickconnect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_Connect other) {
      if (other == null) {
        return;
      }
      if (other.Quickconnect != 0) {
        Quickconnect = other.Quickconnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Quickconnect = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///DIS_CONNECTED
  /// </summary>
  public sealed partial class Kcp_DisConnect : pb::IMessage<Kcp_DisConnect> {
    private static readonly pb::MessageParser<Kcp_DisConnect> _parser = new pb::MessageParser<Kcp_DisConnect>(() => new Kcp_DisConnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_DisConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_DisConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_DisConnect(Kcp_DisConnect other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_DisConnect Clone() {
      return new Kcp_DisConnect(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///断线类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_DisConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_DisConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_DisConnect other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///PING_INDEX
  /// </summary>
  public sealed partial class Kcp_Ping : pb::IMessage<Kcp_Ping> {
    private static readonly pb::MessageParser<Kcp_Ping> _parser = new pb::MessageParser<Kcp_Ping>(() => new Kcp_Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_Ping(Kcp_Ping other) : this() {
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_Ping Clone() {
      return new Kcp_Ping(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_Ping other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Kcp_OneFsPackData : pb::IMessage<Kcp_OneFsPackData> {
    private static readonly pb::MessageParser<Kcp_OneFsPackData> _parser = new pb::MessageParser<Kcp_OneFsPackData>(() => new Kcp_OneFsPackData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_OneFsPackData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_OneFsPackData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_OneFsPackData(Kcp_OneFsPackData other) : this() {
      index_ = other.index_;
      fsdata_ = other.fsdata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_OneFsPackData Clone() {
      return new Kcp_OneFsPackData(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///本帧序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "fsdata" field.</summary>
    public const int FsdataFieldNumber = 2;
    private pb::ByteString fsdata_ = pb::ByteString.Empty;
    /// <summary>
    ///序列化数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Fsdata {
      get { return fsdata_; }
      set {
        fsdata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_OneFsPackData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_OneFsPackData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Fsdata != other.Fsdata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Fsdata.Length != 0) hash ^= Fsdata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Fsdata.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Fsdata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Fsdata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Fsdata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_OneFsPackData other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Fsdata.Length != 0) {
        Fsdata = other.Fsdata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Fsdata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Kcp_FsPackDatas : pb::IMessage<Kcp_FsPackDatas> {
    private static readonly pb::MessageParser<Kcp_FsPackDatas> _parser = new pb::MessageParser<Kcp_FsPackDatas>(() => new Kcp_FsPackDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_FsPackDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_FsPackDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_FsPackDatas(Kcp_FsPackDatas other) : this() {
      fspackdata_ = other.fspackdata_.Clone();
      ackindex_ = other.ackindex_;
      sendindex_ = other.sendindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_FsPackDatas Clone() {
      return new Kcp_FsPackDatas(this);
    }

    /// <summary>Field number for the "fspackdata" field.</summary>
    public const int FspackdataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.Kcp_OneFsPackData> _repeated_fspackdata_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.Kcp_OneFsPackData.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.Kcp_OneFsPackData> fspackdata_ = new pbc::RepeatedField<global::Google.Protobuf.Kcp_OneFsPackData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.Kcp_OneFsPackData> Fspackdata {
      get { return fspackdata_; }
    }

    /// <summary>Field number for the "ackindex" field.</summary>
    public const int AckindexFieldNumber = 2;
    private int ackindex_;
    /// <summary>
    ///我方最新的已ACK序号确认
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ackindex {
      get { return ackindex_; }
      set {
        ackindex_ = value;
      }
    }

    /// <summary>Field number for the "sendindex" field.</summary>
    public const int SendindexFieldNumber = 3;
    private int sendindex_;
    /// <summary>
    ///我方最新的发送序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sendindex {
      get { return sendindex_; }
      set {
        sendindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_FsPackDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_FsPackDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fspackdata_.Equals(other.fspackdata_)) return false;
      if (Ackindex != other.Ackindex) return false;
      if (Sendindex != other.Sendindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fspackdata_.GetHashCode();
      if (Ackindex != 0) hash ^= Ackindex.GetHashCode();
      if (Sendindex != 0) hash ^= Sendindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fspackdata_.WriteTo(output, _repeated_fspackdata_codec);
      if (Ackindex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ackindex);
      }
      if (Sendindex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sendindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fspackdata_.CalculateSize(_repeated_fspackdata_codec);
      if (Ackindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ackindex);
      }
      if (Sendindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sendindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_FsPackDatas other) {
      if (other == null) {
        return;
      }
      fspackdata_.Add(other.fspackdata_);
      if (other.Ackindex != 0) {
        Ackindex = other.Ackindex;
      }
      if (other.Sendindex != 0) {
        Sendindex = other.Sendindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fspackdata_.AddEntriesFrom(input, _repeated_fspackdata_codec);
            break;
          }
          case 16: {
            Ackindex = input.ReadInt32();
            break;
          }
          case 24: {
            Sendindex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Kcp_NotAckIndex : pb::IMessage<Kcp_NotAckIndex> {
    private static readonly pb::MessageParser<Kcp_NotAckIndex> _parser = new pb::MessageParser<Kcp_NotAckIndex>(() => new Kcp_NotAckIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kcp_NotAckIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.NetSocketReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_NotAckIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_NotAckIndex(Kcp_NotAckIndex other) : this() {
      startindex_ = other.startindex_;
      endindex_ = other.endindex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kcp_NotAckIndex Clone() {
      return new Kcp_NotAckIndex(this);
    }

    /// <summary>Field number for the "startindex" field.</summary>
    public const int StartindexFieldNumber = 1;
    private int startindex_;
    /// <summary>
    ///请求重发的第一帧的序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Startindex {
      get { return startindex_; }
      set {
        startindex_ = value;
      }
    }

    /// <summary>Field number for the "endindex" field.</summary>
    public const int EndindexFieldNumber = 2;
    private int endindex_;
    /// <summary>
    ///请求重发的最后一帧的序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Endindex {
      get { return endindex_; }
      set {
        endindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kcp_NotAckIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kcp_NotAckIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Startindex != other.Startindex) return false;
      if (Endindex != other.Endindex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Startindex != 0) hash ^= Startindex.GetHashCode();
      if (Endindex != 0) hash ^= Endindex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Startindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Startindex);
      }
      if (Endindex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Endindex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Startindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Startindex);
      }
      if (Endindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Endindex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kcp_NotAckIndex other) {
      if (other == null) {
        return;
      }
      if (other.Startindex != 0) {
        Startindex = other.Startindex;
      }
      if (other.Endindex != 0) {
        Endindex = other.Endindex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Startindex = input.ReadInt32();
            break;
          }
          case 16: {
            Endindex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
